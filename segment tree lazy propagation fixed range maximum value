/**
sumon kanti dey
**/
#include<bits/stdc++.h>
using namespace std;
#define MAX 1000
#define hell 1e7
int ara[MAX];
int tree[MAX];
int lazy[MAX];
void build_tree(int node,int a,int b)
{
    if(a > b)return;//Out of range
    if(a == b)//Leaf node
    {
        tree[node] = ara[a];
        return;
    }
    build_tree(node*2,a,(a+b)/2);//Leaf child
    build_tree(node*2+1,(a+b)/2 + 1,b);//Right child
    tree[node] = max(tree[node*2],tree[node*2 + 1]);//Max parent from recent child
}
void update_tree(int node,int a,int b,int i,int j,int value)
{
    if(lazy[node] != 0)//This node needs to be updated
    {
        tree[node] += lazy[node];//update here
        if(a != b)//when a and b not leaf node
        {
        lazy[node*2] +=lazy[node];//Define child as lazy
        lazy[node*2 + 1] +=lazy[node];//Define child as lazy
        }
        lazy[node] = 0;//reset here
    }
    if(a>b || a>j || b<i)//Curent segment is not within range[i j]
      return;
    if(a >= i && b<=j)//segment is fully within range[i j]
    {
        tree[node] +=value;
        if(a != b)//Not leaf node
        {
        lazy[node*2] += value;
        lazy[node*2 + 1] += value;
        }
        return;
    }
    update_tree(node*2,a,(a+b)/2,i,j,value);//Update left child
    update_tree(node*2 + 1,(a+b)/2 + 1,b,i,j,value);//Update right child
    tree[node] = max(tree[node*2],tree[node*2 + 1]);//Max update parent from recent child
}
int query_tree(int node,int a,int b,int i,int j)
{
    if(a>b || a>j || b<i)return hell;//out of range
    if(lazy[node] != 0)
    {
        tree[node] +=lazy[node];//update here
        if(a != b)//when a and b not leaf node
        {
        lazy[node*2] +=lazy[node];//Define child as lazy
        lazy[node*2 + 1] +=lazy[node];//Define child as lazy
        }
        lazy[node] = 0;//reset here
    }
    if(a >=i && b<=j)return tree[node];
    int q1 = query_tree(node*2,a,(a+b)/2,i,j);//query left child
    int q2 = query_tree(node*2 + 1,(a+b)/2 + 1,b,i,j);//query right child
    int res = max(q1,q2);
    return res;
}
int main()
{
   // cout<<hell<<endl;
    int n;
    cin>>n;
    for(int i=0; i<n; i++)cin>>ara[i];
    build_tree(1,0,n-1);
    cout<<"Build tree :"<<endl;
    for(int i=0; i<20; i++)  cout<<tree[i]<<" ";
    cout<<endl<<endl;

    update_tree(1,0,n-1,0,4,4);//Increment rqnge[0,4] by 4,here 0,n-1 represent current range
    cout<<"First updated tree: "<<endl;
    for(int i=0; i<20; i++)  cout<<tree[i]<<" ";
    cout<<endl<<endl;

    update_tree(1,0,n-1,0,4,5);//Increment rqnge[4,5] by 5,here 0,n-1 represent current range
    cout<<"Second updated tree: "<<endl;
    for(int i=0; i<20; i++)  cout<<tree[i]<<" ";
    cout<<endl<<endl;

    update_tree(1,0,n-1,1,1,4);//Increment rqnge[1,1] by 4,here 0,n-1 represent current range
    cout<<"Third updated tree: "<<endl;
    for(int i=0; i<20; i++)  cout<<tree[i]<<" ";
    cout<<endl<<endl;

    cout<<"Max of query range : "<<query_tree(1,0,n-1,0,n-1)<<endl;//Get maximum value from range [0,n-1]
    return 0;
}

/**intput:
8
-1 2 4 1 7 1 3 2
**/

/**
output:
Build tree :
0 7 4 7 2 4 7 3 -1 2 4 1 7 1 3 2 0 0 0 0

First updated tree:
0 11 8 11 2 4 11 3 -1 2 4 1 11 1 3 2 0 0 0 0

Second updated tree:
0 16 13 16 2 4 16 3 -1 2 4 1 16 1 3 2 0 0 0 0

Third updated tree:
0 16 15 16 15 13 16 3 8 15 4 1 16 1 3 2 0 0 0 0

Max of query range :16
**/





