/**
sumon kanti dey
**/
#include<bits/stdc++.h>
using namespace std;
#define MAX 1000
#define hell 1e7
int ara[MAX];
int tree[MAX];
int lazy[MAX];
void build_tree(int node,int a,int b)
{
    if(a > b)return;//Out of range
    if(a == b)//Leaf node
    {
    tree[node] = ara[a];
    return;
    }
    build_tree(node*2,a,(a+b)/2);//Leaf child
    build_tree(node*2+1,(a+b)/2 + 1,b);//Right child
    tree[node] = tree[node*2] + tree[node*2 + 1];// sum of present node
}

void update_tree(int node,int a,int b,int i,int j,int value)
{
    if(lazy[node] != 0)//This node needs to be updated
    {
        tree[node] += (b-a+1)*lazy[node];//sum of present tree node and total leaf node
        if(a != b)//when a and b not leaf node
        {
        lazy[node*2] +=lazy[node];//Define child as lazy
        lazy[node*2 + 1] +=lazy[node];//Define child as lazy
        }
        lazy[node] = 0;//reset here
    }
    if(a>b || a>j || b<i)//Curent segment is not within range[i j]
      return;
    if(a >= i && b<=j)//segment is fully within range[i j]
    {
        tree[node] +=(b-a+1)*value;//sum of present tree node and total leaf node
        if(a != b)//Not leaf node
        {
        lazy[node*2] += value;
        lazy[node*2 + 1] += value;
        }
        return;
    }
    update_tree(node*2,a,(a+b)/2,i,j,value);//Update left child
    update_tree(node*2 + 1,(a+b)/2 + 1,b,i,j,value);//Update right child
    tree[node] = tree[node*2] + tree[node*2 + 1];//update sum of present node
}

int query_tree(int node,int a,int b,int i,int j)
{
    if(a>b || a>j || b<i)return 0;//out of range
    if(lazy[node] != 0)
    {
        tree[node] += (b-a+1)*lazy[node];//sum of present tree node and total leaf node
        if(a != b)//when a and b not leaf node
        {
        lazy[node*2] +=lazy[node];//Define child as lazy
        lazy[node*2 + 1] +=lazy[node];//Define child as lazy
        }
        lazy[node] = 0;//reset here
    }
    if(a >=i && b<=j)return tree[node];
    int q1 = query_tree(node*2,a,(a+b)/2,i,j);//query left child
    int q2 = query_tree(node*2 + 1,(a+b)/2 + 1,b,i,j);//query right child
    int res = q1 + q2;
    return res;
}
int query_range(int m,int qs,int qe)
{
    if(qs < 0 || qe > m-1 || qs>qe)
    {
        cout<<"Invalid input"<<endl;
        return -1;
    }
   return query_tree(1,0,m-1,qs,qe);//sum in rqnge[qs,qe]
}

void update_range(int m,int us,int ue,int diff)
{
  update_tree(1,0,m-1,us,ue,diff);//Increment rqnge[us,ue] by diff,here 0,m-1 represent current range
}
int main()
{
    //cout<<hell<<endl;
    int n;
    cin>>n;
    for(int i=0; i<n; i++)cin>>ara[i];
    build_tree(1,0,n-1);
    cout<<"Build tree   :"<<endl;
    for(int i=0; i<20; i++)  cout<<tree[i]<<" ";
    cout<<endl<<endl;
    cout<<"Sum of query range : "<<query_range(n,0,3)<<endl;//Get sum in query_range [0,3]

    update_range(n,1,5,10);//Increment rqnge[1,5] by 10
    cout<<"First Updated tree.... :   "<<endl;
    for(int i=0; i<20; i++)  cout<<tree[i]<<" ";
    cout<<endl<<endl;

    cout<<"sum of query range: "<<query_range(n,1,3)<<endl;//Get sum in query_range [1,3]

    cout<<"Second Updated tree.... :   "<<endl;
    update_tree(1,0,n-1,0,4,1);//Increment rqnge[0,4] by 1
    for(int i=0; i<20; i++)  cout<<tree[i]<<" ";
    cout<<endl<<endl;

    cout<<"sum of query range: "<<query_range(n,1,3)<<endl;//Get sum in query_range [1,3]
    return o;
}

/**input:
6
1 3 5 7 9 11
**/

/** output:
Build tree   :
0 36 9 27 4 5 16 11 1 3 0 0 7 9 0 0 0 0 0 0

Sum of query range : 16
First Updated tree.... :
0 86 29 57 14 15 16 11 1 13 0 0 7 9 0 0 0 0 0 0

sum of query range: 45
Second Updated tree.... :
0 91 32 59 14 15 38 21 1 13 0 0 17 9 0 0 0 0 0 0

sum of query range: 48
**/
