/* I think it is much better than 
bit mask seive*/

#include<bits/stdc++.h>
using namespace std;
#define mx 1000000009
int N =    1000000009;
int prime[50847535];//that means 1000000009 num re 50847535 ta prime number take so size aita
int status[mx/32];
int cnt;
bool Check(int N,int pos){return (bool)(N & (1<<pos));}
int Set(int N,int pos){	return N |= (1<<pos);}
void sieve()
{
	 int i, j, sqrtN;
     sqrtN = int( sqrt( N ) );
     for( i = 3; i <= sqrtN; i += 2 )
     {
		 if( Check(status[i>>5],i&31)==0)
		 {
	 		 for( j = i*i; j <= N; j += (i<<1) )
			 {
				 status[j>>5]=Set(status[j>>5],j & 31)   ;
	 		 }
		 }
	 }

	 cnt=1;
	 prime[0]=2;
	 for(i=3;i<=N;i+=2){
		 if( Check(status[i>>5],i&31)==0)
	 	 prime[cnt++]=i;
	 }
}
int main()
{
    sieve();

    cout<<"total prime num ace = "<<cnt<<endl;
    for(int i=0; i<100; i++){
        cout<<prime[i]<<endl;
    }

}

