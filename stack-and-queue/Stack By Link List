//ref https://www.youtube.com/watch?v=MuwxQ2IB8lQ&index=16&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P
//ref http://www.cprogramto.com/stack-using-linked-list-in-c-code/
#include<bits/stdc++.h>
using namespace std;
struct node{
  int data;
  node* next;
};
node* top;
///Push Operation In a Link List
void push(int x)
{
    node* temp = new node();
    temp->data = x;
    temp->next = top;
    top = temp;
}
///Pop Operation From a Link List
void pop()
{
    node* temp;
    if(top == NULL){
        return;
    }
   else{
        temp = top;
        top = top->next;
        free(temp);
    }
}
///Display Operation From a Link List
void display()
{
    node* top1 = top;
    if(top1 != NULL){
    cout<<"Stack Element Are : "<<endl;
    while(top1 != NULL){
        cout<<" "<<top1->data;
        top1 = top1->next;
    }
    }
   else {
    cout<<"Stack is Empty";
   }
   cout<<endl;

}
int main()
{
    top = NULL;
    int i;
   cout<<"1. Push to Stack : "<<endl;
   cout<<"2. Pop to Stack : "<<endl;
   cout<<"3. Display The Stack Value : "<<endl;
   cout<<"4. Exit : "<<endl;
   while(1)
   {
       cout<<"Choose opetion: ";
       cin>>i;
       switch(i)
       {
       case 1:
        {
         int value;
         cout<<"Enter a value to push :";
         cin>>value;
         push(value);
         display();
         break;
        }
       case 2:
        {
            pop();
            display();
            break;
        }
       case 3:
        {
            display();
            break;
        }
       case 4:
        {
           node* temp = top;
           cout<<"Total Stack value before Exit : "<<endl;
           while(temp != NULL)
           {
               cout<<"  "<<temp->data;
               temp = temp->next;
               free(top);
               top = temp;

           }
           exit(0);

        }
        default:
        {
            cout<<"Choose Wrong Opetion"<<endl;
            break;
        }

       }
   }
   return 0;
}
/**
Input Output

1. Push to Stack :
2. Pop to Stack :
3. Display The Stack Value :
4. Exit :
Choose opetion: 1
Enter a value to push :10
Stack Element Are :
 10
Choose opetion: 2
Stack is Empty
Choose opetion: 1
Enter a value to push :10
Stack Element Are :
 10
Choose opetion: 1
Enter a value to push :20
Stack Element Are :
 20 10
Choose opetion: 1
Enter a value to push :30
Stack Element Are :
 30 20 10
Choose opetion: 2
Stack Element Are :
 20 10
Choose opetion: 3
Stack Element Are :
 20 10
Choose opetion: 1
Enter a value to push :90
Stack Element Are :
 90 20 10
Choose opetion: 4
Total Stack value before Exit :
  90  20  10
**/


