///https://discuss.codechef.com/questions/27425/how-to-use-the-priority-queue-stl-for-objects
///https://binaryrongo.wordpress.com/2014/01/31/operator-overload/
///http://fusharblog.com/3-ways-to-define-comparison-functions-in-cpp/
///http://www.technical-recipes.com/2011/priority-queues-and-min-priority-queues-in-c/
#include<bits/stdc++.h>
using namespace std;
/**
struct node{
   int a;
   bool operator < (const node&p)const{///if i want to sort use < operator
      // return a>p.a;
       if(a>p.a)return true;
       else return false;

   }

};
int main ()
{
  priority_queue<node> pq1;
  node m;
  m.a = 30;
  pq1.push(m);  // inserts 30 to pq1 , now top = 30
   m.a = 90;
  pq1.push(m);  // inserts 40 to pq1 , now top = 40 ( maxinmum element)
   m.a = 300;
  pq1.push(m);  // inserts 90 to pq1 , now top = 90
   m.a = 40;
  pq1.push(m);	// inserts 60 to pq1 , top still is 90
  while(!pq1.empty())
  {
     node p =pq1.top();
     cout<<p.a<<endl;
      pq1.pop();
  }
  return 0;
}
**/

/**
struct compare
{
  bool operator()(const int& l, const int& r)
  {
      return l < r;
  }
};
int main ()
{
  priority_queue<int,vector<int>,compare> pq1;

  pq1.push(30);  // inserts 30 to pq1 , now top = 30
  pq1.push(40);  // inserts 40 to pq1 , now top = 40 ( maxinmum element)
  pq1.push(90);  // inserts 90 to pq1 , now top = 90
  pq1.push(60);	// inserts 60 to pq1 , top still is 90
  while(!pq1.empty())
  {
     cout<<pq1.top()<<endl;
      pq1.pop();
  }
  return 0;
}
**/

struct compare{
   // compare(int o) : a(o) {}
    int a;
friend bool operator<(const compare& l, const compare& r)
  {
      return l.a < r.a;///friend function can not take member variable here we compare
      ///l amd m n
  }
};


int main ()
{
  priority_queue<compare> pq1;
  compare m;
   m.a = 30;
  pq1.push(m);  // inserts 30 to pq1 , now top = 30
   m.a = 90;
  pq1.push(m);  // inserts 40 to pq1 , now top = 40 ( maxinmum element)
   m.a = 300;
  pq1.push(m);  // inserts 90 to pq1 , now top = 90
   m.a = 40;
  pq1.push(m);	// inserts 60 to pq1 , top still is 90
  while(!pq1.empty())
  {
      compare l = pq1.top();
       pq1.pop();
     cout<<l.a<<endl;

  }
  return 0;
}

