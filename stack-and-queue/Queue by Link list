//ref https://www.youtube.com/watch?v=A5_XdiK4J8A&index=24&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P
#include<bits/stdc++.h>
using namespace std;
struct node{
  int data;
  node *next;
};
// Two glboal variables to store address of front and rear nodes.
 node* front = NULL;
 node* rear = NULL;
// To Enqueue an integer
void Enqueue(int x)
{
    node* temp = new node();
    temp->data = x;
    temp->next = NULL;
    if(front == NULL && rear == NULL){
        front = rear = temp;
        return;
    }
    rear->next= temp;
    rear = temp;
}
///show front data
int Front()
{
    if(front == NULL){
        cout<<"Queue is empty"<<endl;
        return 0;
    }
    return front->data;
}
// To Dequeue an integer.
void Dequeue()
{
    node* temp = new node();
    if(front == NULL){
        cout<<"Queue is empty "<<endl;
        return;
    }
    if(front == rear)
    {
        cout<<"Deleted element is :"<<front->data<<endl;
        front = rear = NULL;
    }
    else {
        cout<<"Deleted element is :"<<front->data<<endl;
        front = front->next;
        free(temp);
    }
}

///print data
void Print()
{
    node* temp = front;
    cout<<"Queue has :";
    while(temp != NULL){
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl<<endl;;
}
int main()
{
    Enqueue(2); Print();
	Enqueue(4); Print();
	Enqueue(6); Print();
	Dequeue();Print();
    Enqueue(8); Print();
    Dequeue();Print();
    Dequeue();Print();
    Dequeue();Print();
    Dequeue();Print();
    Dequeue();Print();
    Enqueue(10); Print();
     if(Front()!=0) {
         cout<<"Front data is "<<Front()<<endl;
    }
   return 0;
}
