//http://www.shafaetsplanet.com/planetcoding/?p=1557
//description 2 no khata
#include<bits/stdc++.h>
using namespace std;
#define mx 100001
int ara[mx];
int tree[mx*3];
void build(int node,int b,int e)//build array in 0(nlogn)...
{
    if(b == e)
    {
    tree[node] = ara[b];
    return;
    }
    int left = node*2;
    int right = node*2 + 1;
    int mid = (b+e)/2;
    build(left,b,mid);
    build(right,mid+1,e);
    tree[node] = tree[left]+tree[right];
    //tree[node] = min(tree[left],tree[right]);
    //tree[node] = max(tree[left],tree[right]);
}
int query(int node,int b,int e,int i,int j)//query take 0(nlogn)....
{
    if(i>e || j<b) return 0;
    // if(i>e || j<b) return 1000000000;
    if(b >= i && e <= j) return tree[node];
    int left = node*2;
    int right = node*2 + 1;
    int mid = (b+e)/2;
    int p1 = query(left,b,mid,i,j);
    int p2 = query(right,mid+1,e,i,j);
    return p1+p2;
     // return min(p1,p2);
     // return max(p1,p2);
}
void update(int node,int b,int e,int i,int newvalue)//query take 0(nlogn)....
{
    if(i > e || i < b) return ;
    if(b >= i && e <= i ){
        tree[node] = newvalue;
        return;
    }
    int left = node*2;
    int right = node*2 + 1;
    int mid =(b+e)/2;
    update(left,b,mid,i,newvalue);
    update(right,mid+1,e,i,newvalue);
    tree[node]=tree[left]+tree[right];
    //tree[node] = min(tree[left],tree[right]);
    //tree[node] = max(tree[left],tree[right]);

}
int main()
{
    int n;
    cin>>n;
     ara[0]=0;
    for(int i=1; i<=n; i++)cin>>ara[i];
    build(1,1,n);
    for(int i=1; i<=20; i++)cout<<tree[i]<<" ";
    cout<<endl;
    cout<<query(1,1,n,1,5)<<endl;//query from 1 to 5 index
    update(1,1,n,3,-2);//3th index change by value -2
    cout<<query(1,1,n,1,5)<<endl;//query from 1 to 5 index
    for(int i=1; i<=20; i++)cout<<tree[i]<<" ";
    return 0;
}
