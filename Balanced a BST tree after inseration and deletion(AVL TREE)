///ref http://www.geeksforgeeks.org/avl-tree-set-2-deletion/
///delete potion https://www.youtube.com/watch?v=gcULXE7ViZw
///insert portion https://www.youtube.com/watch?v=COZK7NATh4k
///insert portion http://www.geeksforgeeks.org/avl-tree-set-1-insertion/
#include<bits/stdc++.h>
using namespace std;
//An AVL tree node
struct node
{
    int data;
    int hi;
    node *left;
    node *right;
};
/**Find the maximum height of this Tree**/
int height(node *N)
{
    if(N == NULL)return 0;
    return N->hi;
}
/**If Node is NULL then always creat new node**/
node *Getnewnode(int num)
{
    node *newnode = new node();
    newnode->data = num;
    newnode->left = newnode->right = NULL;
    newnode->hi = 1;
    return newnode;
}
/** For the right rotation of a Tree**/
node *rightRotate(node *y)
{
    node *x = y->left;
    node *T2 = x->right;
    //create rotation
    x->right = y;
    y->left = T2;
    //then update Hight
    y->hi = max(height(y->left),height(y->right)) + 1;
    x->hi = max(height(x->left),height(x->right)) + 1;
    //return newly created node x
    return x;
}
/** For the left rotation of a Tree**/
node *leftRotate(node *x)
{
    node *y = x->right;
    node *T2 = y->left;
    //perform rotation
    y->left = x;
    x->right = T2;
    //then update Hight
    x->hi = max(height(x->left),height(x->right)) + 1;
    y->hi = max(height(y->left),height(y->right)) + 1;
    //return newly created node x
    return y;
}
/** Get height balance of this Tree**/
int Getbalance(node *N)
{
    if(N == NULL)return 0;
    return (height(N->left) - height(N->right));
}
/**insert a num in the tree by giving the address of root**/
node *insert(node *temp,int num)
{
    /**1 Normal BST inseration**/
    if(temp == NULL) return (Getnewnode(num));
    if(num < temp->data) {
    temp->left = insert(temp->left,num);
    }
    else  {
    temp->right = insert(temp->right,num);
    }
    /**2 Update height of the Ancestor node **/
    temp->hi = max(height(temp->left),height(temp->right)) + 1;
    /**3 Balancing factor**/
    int balance = Getbalance(temp);
    /** If node is unbalance then 4 case create**/
   // left left case
    if(balance > 1){
    if(num < temp->left->data){//left left case
     return rightRotate(temp);
    }
    else {//left right case
        temp->left = leftRotate(temp->left);
        return rightRotate(temp);
    }
    }
     if(balance < -1){
    if(num > temp->right->data){//right right case
     return leftRotate(temp);
    }
    else {//right left case
        temp->right = rightRotate(temp->right);
        return leftRotate(temp);
    }
    }
    /**return unchanged node **/
    return temp;
}
//Function to find minimum in a tree.
node* FindMin(node* root)
{
	while(root->left != NULL) root = root->left;
	return root;
}
  /** Delete node **/
node* Delete(node *root, int data)
{   /**Delelte node from BST  start **/
    if(root == NULL) return root;
    else if(data < root->data) root->left = Delete(root->left,data);
    else if (data > root->data) root->right = Delete(root->right,data);
    else {
    // Case 1:  No child
    if(root->left == NULL && root->right == NULL) {
        delete root;
        root = NULL;
    }
    //Case 2: One child
    else if(root->left == NULL) {
         node *temp = root;
        root = root->right;
        delete temp;
    }
    else if(root->right == NULL) {
         node *temp = root;
        root = root->left;
        delete temp;
    }
    // case 3: 2 children
    else {
         node *temp = FindMin(root->right);
        root->data = temp->data;
        root->right = Delete(root->right,temp->data);
    }
    }
    if(root == NULL) return root;
    /** Update height of the Ancestor node **/
	root->hi = max(height(root->left),height(root->right)) + 1;
	 /** Balancing factor**/
    int balance = Getbalance(root);
    /** If node is unbalance then 4 case create**/
   // left left case
    if(balance > 1){
    if(Getbalance(root->left) >= 0){//left left case
     return rightRotate(root);
    }
    else {//left right case
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    }
     if(balance < -1){
    if(Getbalance(root->left )<=0){//right right case
     return leftRotate(root);
    }
    else {//right left case
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }
    }
	return root;
}
/** Preorder Traversal of this Tree**/
void preOrder(node *root)
{
    if(root != NULL)
    {
        cout<<" "<<root->data;
        preOrder(root->left);
        preOrder(root->right);
    }
}
int main()
{
    node *root = NULL;//root is a local variable not global
    root = insert(root, 1);
    root = insert(root, 2);
    root = insert(root, 3);
    root = insert(root, 4);
    root = insert(root, 5);
    root = insert(root, 6);
    root = insert(root, 7);
    root = insert(root, 8);
    root = insert(root, 9);
 cout<<"preorder traversal of the constructed AVL tree is"<<endl;
  preOrder(root);
  root = Delete(root, 8);
  cout<<endl;
 cout<<"preorder traversal of the constructed AVL tree is"<<endl;
  preOrder(root);
  return 0;
}

